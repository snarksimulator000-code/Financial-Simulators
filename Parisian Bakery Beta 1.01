// Update: added croissant class, and moved int quantity to the parent class
#include <iostream>
#include <vector>
#include <string>

class Product { // Products sold 
protected:
    std::string name;
    double price;
    int quantity;
    
public:
    Product(std::string n, double p, int q) : name(n), price(p), quantity(q) {} //constructor
    virtual void Display() const {
        std::cout << name << " - " << price << "€\n";
    }
    
};
// Inherited classes
class Macaron : public Product {
private:
    std::string flavour;
    
public:
    Macaron(double p, int q, std::string f) : Product("Macaron", p, q), flavour(f) {} 
    
    void Display() const override {
        std::cout << name << " - " << price << "€ for " << quantity << " - " << flavour << "\n";
    }
    
};

class Croissant : public Product {
private:
    std::string Add_on; //choose what to put on croissant
public:
    Croissant(double p, int q, std::string a) : Product("Croissant", p, q), Add_on(a) {}
    
    void Display() const override {
        std::cout << Add_on << " " << name << " - " << price << "€ for " << quantity << "\n";
    }
};

int main() {
  std::vector<Product*> Bakery;
  Bakery.push_back(new Product("Paris Brest", 2.55, 10));
  Bakery.push_back(new Macaron(5.35, 12, "Vanilla"));
  Bakery.push_back(new Croissant(50, 12, "Ham and Cheese"));

std::cout << " ====== MENU ====== " << "\n";
for (auto& c : Bakery){
    c->Display();
}

for (auto& c : Bakery) delete c;
    Bakery.clear();

    return 0;
}
